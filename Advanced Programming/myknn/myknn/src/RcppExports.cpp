// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// my_knn_c_euclidean
int my_knn_c_euclidean(NumericMatrix X, NumericVector X0, NumericVector y);
RcppExport SEXP _myknn_my_knn_c_euclidean(SEXP XSEXP, SEXP X0SEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(my_knn_c_euclidean(X, X0, y));
    return rcpp_result_gen;
END_RCPP
}
// my_knn_c_minkowsky
int my_knn_c_minkowsky(NumericMatrix X, NumericVector X0, NumericVector y, double p);
RcppExport SEXP _myknn_my_knn_c_minkowsky(SEXP XSEXP, SEXP X0SEXP, SEXP ySEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(my_knn_c_minkowsky(X, X0, y, p));
    return rcpp_result_gen;
END_RCPP
}
// my_knn_tuningp
int my_knn_tuningp(NumericMatrix X, NumericVector X0, NumericVector y, NumericVector possible_p);
RcppExport SEXP _myknn_my_knn_tuningp(SEXP XSEXP, SEXP X0SEXP, SEXP ySEXP, SEXP possible_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type possible_p(possible_pSEXP);
    rcpp_result_gen = Rcpp::wrap(my_knn_tuningp(X, X0, y, possible_p));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _myknn_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_myknn_my_knn_c_euclidean", (DL_FUNC) &_myknn_my_knn_c_euclidean, 3},
    {"_myknn_my_knn_c_minkowsky", (DL_FUNC) &_myknn_my_knn_c_minkowsky, 4},
    {"_myknn_my_knn_tuningp", (DL_FUNC) &_myknn_my_knn_tuningp, 4},
    {"_myknn_rcpp_hello_world", (DL_FUNC) &_myknn_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_myknn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
